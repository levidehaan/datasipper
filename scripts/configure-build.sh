#!/bin/bash

# DataSipper Build Configuration Script
# This script configures the Chromium build for DataSipper development

set -e

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${GREEN}DataSipper Build Configuration${NC}"
echo "============================="

# Get script directory and project root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
CHROMIUM_SRC="${PROJECT_ROOT}/chromium-src/src"

# Build configuration options
BUILD_TYPE="${1:-debug}"  # debug, release, or dev
BUILD_NAME="DataSipper"

case "$BUILD_TYPE" in
    "debug")
        BUILD_DIR="out/Debug"
        BUILD_ARGS='
            is_debug=true
            symbol_level=2
            enable_nacl=false
            enable_remoting=false
            use_cups=true
            proprietary_codecs=true
            ffmpeg_branding="Chrome"
            enable_iterator_debugging=true
            use_goma=false
        '
        echo -e "${YELLOW}Configuring debug build...${NC}"
        ;;
    "release")
        BUILD_DIR="out/Release"
        BUILD_ARGS='
            is_debug=false
            is_official_build=true
            symbol_level=0
            enable_nacl=false
            enable_remoting=false
            use_cups=true
            proprietary_codecs=true
            ffmpeg_branding="Chrome"
            use_goma=false
        '
        echo -e "${YELLOW}Configuring release build...${NC}"
        ;;
    "dev")
        BUILD_DIR="out/DataSipper"
        BUILD_ARGS='
            is_debug=false
            is_component_build=true
            symbol_level=1
            enable_nacl=false
            enable_remoting=false
            use_cups=true
            proprietary_codecs=true
            ffmpeg_branding="Chrome"
            use_jumbo_build=true
            use_goma=false
        '
        echo -e "${YELLOW}Configuring development build...${NC}"
        ;;
    *)
        echo -e "${RED}Invalid build type: $BUILD_TYPE${NC}"
        echo "Usage: $0 [debug|release|dev]"
        exit 1
        ;;
esac

# Source environment
source "${PROJECT_ROOT}/scripts/setup-env.sh"

# Verify Chromium source exists
if [ ! -d "$CHROMIUM_SRC" ]; then
    echo -e "${RED}✗ Chromium source not found at: $CHROMIUM_SRC${NC}"
    echo "Run ./scripts/fetch-chromium.sh first"
    exit 1
fi

cd "$CHROMIUM_SRC"

# Verify patches are applied
if [ ! -f ".datasipper_patches_applied" ]; then
    echo -e "${YELLOW}⚠ DataSipper patches not detected${NC}"
    echo "Apply patches with: ./scripts/patches.py apply"
    read -p "Continue without patches? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

echo -e "${BLUE}Configuring build directory: ${BUILD_DIR}${NC}"

# Create build directory and configure
mkdir -p "$BUILD_DIR"

echo -e "${BLUE}Running gn gen with DataSipper configuration...${NC}"

# Generate build configuration
cat > "$BUILD_DIR/args.gn" << EOF
# DataSipper Build Configuration
# Generated by configure-build.sh

# Build type: $BUILD_TYPE
${BUILD_ARGS}

# DataSipper specific settings
datasipper_enabled = true
datasipper_network_interception = true
datasipper_ui_panel = true
datasipper_external_integrations = true

# Performance optimizations
use_thin_lto = false  # Disable for faster builds
use_cfi = false      # Disable CFI for faster builds

# Development features
enable_basic_printing = true
enable_print_preview = true
enable_pdf = true
enable_plugins = false
enable_widevine = false

# Security features (keep enabled for DataSipper)
use_official_google_api_keys = false
google_api_key = ""
google_default_client_id = ""
google_default_client_secret = ""

# Branding
chrome_pgo_phase = 0
is_chrome_branded = false
use_unofficial_version_number = false
EOF

# Run gn gen
if gn gen "$BUILD_DIR"; then
    echo -e "${GREEN}✓ Build configuration completed successfully${NC}"
else
    echo -e "${RED}✗ Build configuration failed${NC}"
    exit 1
fi

# Display configuration summary
echo ""
echo -e "${GREEN}Build Configuration Summary${NC}"
echo "=========================="
echo "Build Type: $BUILD_TYPE"
echo "Build Directory: $BUILD_DIR"
echo "Source Directory: $CHROMIUM_SRC"
echo ""

# Show build arguments
echo -e "${YELLOW}Build Arguments:${NC}"
cat "$BUILD_DIR/args.gn"
echo ""

# Estimate build requirements
echo -e "${YELLOW}Build Requirements:${NC}"
case "$BUILD_TYPE" in
    "debug")
        echo "Estimated build time: 2-4 hours (first build)"
        echo "Estimated disk usage: ~15GB"
        echo "RAM requirement: 8GB minimum, 16GB recommended"
        ;;
    "release")
        echo "Estimated build time: 1-3 hours (first build)"
        echo "Estimated disk usage: ~8GB"
        echo "RAM requirement: 8GB minimum, 16GB recommended"
        ;;
    "dev")
        echo "Estimated build time: 1-2 hours (first build)"
        echo "Estimated disk usage: ~12GB"
        echo "RAM requirement: 6GB minimum, 12GB recommended"
        ;;
esac

echo ""
echo -e "${GREEN}Next Steps:${NC}"
echo "1. Build DataSipper: ninja -C $BUILD_DIR chrome"
echo "2. Run DataSipper: ./$BUILD_DIR/chrome"
echo ""
echo -e "${YELLOW}Build Commands:${NC}"
echo "Full build:        ninja -C $BUILD_DIR chrome"
echo "Parallel build:    ninja -C $BUILD_DIR -j\$(nproc) chrome"
echo "Limited parallel:  ninja -C $BUILD_DIR -j4 chrome"
echo "Clean build:       rm -rf $BUILD_DIR && $0 $BUILD_TYPE"
echo ""

# Optional: Start build automatically
read -p "Start building now? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${BLUE}Starting build...${NC}"
    # Determine optimal job count
    JOBS=$(nproc)
    MEMORY_GB=$(free -g | awk '/^Mem:/{print $2}')
    
    # Limit jobs based on available memory (1.5GB per job as rough estimate)
    MAX_JOBS=$((MEMORY_GB / 2))
    if [ $JOBS -gt $MAX_JOBS ]; then
        JOBS=$MAX_JOBS
    fi
    
    echo "Using $JOBS parallel jobs"
    ninja -C "$BUILD_DIR" -j$JOBS chrome
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✓ Build completed successfully!${NC}"
        echo "Run DataSipper with: ./$BUILD_DIR/chrome"
    else
        echo -e "${RED}✗ Build failed${NC}"
        exit 1
    fi
fi